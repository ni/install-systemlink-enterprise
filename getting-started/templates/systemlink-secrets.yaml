

## Default secret values for the systemlink Helm chart.
## This is a YAML-formatted file.
## Declare override values for variables.

## Secrets that apply to the entire application.
##
secrets:
  ## Container image repository credentials.
  ##
  imagePull:
    ## Toggle off to disable deployment of this specific secret. This should be done if this secret is being configured as a cluster setting
    ## rather than for this specific application.
    ##
    # <ATTENTION> - Disable if the container repository credentials are configured elsewhere.
    deploySecret: true
    ##  The registry to which this secret applies. Ignored if global.imageRegistry is set.
    ##
    registry: ""
    ## User for repository access. This information will have been provided with the application.
    ##
    user: &imageRegistryUser "" # <ATTENTION>
    ## Password for repository access. This information will have been provided with the application.
    ##
    password: &imageRegistryPassword ""  # <ATTENTION>
  # MinIO block storage credentials.
  minio:
    ## User for MinIO access. This default can be used if desired.
    ##
    user: &minioUser "systemlink"
    # Password for MinIO access. No requirements are enforced on the format of this password.
    ##
    password: &minioPassword ""  # <ATTENTION>
  ## RabbitMQ message bus credentials for service-to-service communication.
  ##
  rabbitmq:
    ## Password for RabbitMQ access. No requirements are enforced on the format of this password.
    ##
    password: ""  # <ATTENTION>
    ## This cookie is used to authenticate containers in the RabbitMQ stateful set. Use a strong random sequence of characters.
    ##
    erlangCookie: ""  # <ATTENTION>
  ## Miscellaneous artifact repository credentials.
  ##
  genericArtifactPull:
    ## URL for the repository.
    ##
    url: "https://niedge01.jfrog.io/artifactory/ni-generic" # <ATTENTION> - Override if mirroring the SystemLink container registry.
    ## User for repository access. This will be the same as the image pull credentials.
    ##
    user: *imageRegistryUser
    ## Password for repository access. This will be the same as the image pull credentials.
    ##
    password: *imageRegistryPassword

## Secret configuration for the SystemLink web application.
##
webserver:
  secrets:
    ## Cryptographic key to be used for AES-128 encryption of session data. This key should have a length of 32 bytes.
    ##
    encryptionKey: ""  # <ATTENTION>
    ## Cryptographic key to be used for SHA-256 signing of session data. This key should have a length between 32 and 64 bytes.
    ##
    signatureKey: ""  # <ATTENTION>
    ## If webserver.proxy.authority is configured, optionally provide credentials for the proxy.
    ##
    proxy:
      # Optional - The username for the proxy credentials
      username: "" # <ATTENTION> - only required if the proxy is enabled.
      # Optional - The password for the proxy credentials
      password: "" # <ATTENTION> - only required if the proxy is enabled.
    ## Secrets used to configure the OpenID Connect provider.
    ##
    oidc:
      ## OpenID Connect client identifier for this application. This value will come from your authentication provider.
      ##
      clientId: ""  # <ATTENTION>
      ## Secret associated with the clientId. This value will come from your authentication provider.
      ##
      clientSecret: ""  # <ATTENTION>
      ## [Optional] A JSON web key set used to authenticate web tokens provided by the authentication provider.
      ##
      # jwks: ""
    # The password used to connect to Redis.
    redisPassword: "" # <ATTENTION>

## Secret configuration for user management.
##
userservices:
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # <ATTENTION>
      ## Password for the limited user allocated to allow the user service to access the database. This password cannot contain commas or any character which must be escaped in a URL.
      ##
      userServicePassword: ""  # <ATTENTION>
      ## Password for the limited user allocated to allow the key service to access the database. This password cannot contain commas or any character which must be escaped in a URL.
      ##
      keyServicePassword: ""  # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # <ATTENTION>
    ## Cryptographic key used for AEAD encryption of continuation tokens. Use a 32-byte cryptographically random value which is base64 encoded.
    ##
    continuationTokenEncryptionKey: "" # <ATTENTION>
    ## A list of API keys. SystemLink uses these keys to authorize service-to-service interactions within the application.
    ## Each entry must provide the key, the name of the assigned service, and a SHA-512 hash of the key.
    ## For more information visit https://github.com/ni/install-systemlink-enterprise/blob/main/getting-started/secrets.md
    ##
    whitelistedApiKeys: # <ATTENTION>
      - serviceName: "assetservice"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "dashboardhost"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "jupyterhub"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "license"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "nbexec-argo-workflow"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "saltmaster-init"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "sessionmanagerservice"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "systemsmanagement-service"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "webserver"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "routineeventtrigger"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "routinescheduletrigger"
        key: ""
        hash: "<SHA512 hash of key>"
      - serviceName: "routineexecutor"
        key: ""
        hash: "<SHA512 hash of key>"

## Secret configuration for Asset Management
##
assetservice:
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: "" # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: "" # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to mongodb documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: "" # <ATTENTION>

## Secret configuration for Grafana dashboard hosting.
##
dashboardhost:
  secrets:
    ## PostgresSQL Database credentials.
    ##
    database:
      ## Database host
      ##
      host: ""  # <ATTENTION>
      ## User for database access. The default can be used.
      ##
      user: "systemlink"
      ## Password for database access.
      ##
      password: ""  # <ATTENTION>
    ## Admin credentials for the Grafana instance. 
    ## Note: You cannot change the credentials after the first deployment.
    grafana:
      ## Admin user name. The default can be used.
      ##
      user: "admin"
      ## Admin password.
      ##
      password: ""  # <ATTENTION>

## Secret configuration for the data frame service.
##
dataframeservice:
  secrets:
    ## Access key information for S3/MinIO access.
    ##
    s3:
      ## Access key ID for the S3 instance.
      ##
      accessKeyId: *minioUser
      ## Access key for the S3 instance.
      ##
      accessKey: *minioPassword
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster. Ignored if database.useCustom is true.
      ##
      rootPassword: ""  # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: ""  # <ATTENTION>
      ## Key used to authenticate pods in the database cluster. Ignored if database.useCustom is true.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # <ATTENTION>
    ## Credentials for the Dremio instance.
    ##
    dremio:
      ## The username for the Dremio instance.
      ##
      username: "systemlink"
      ## The password for the Dremio instance.
      ##
      password: ""  # <ATTENTION>
  sldremio:
    # Dremio distributed storage configuration. This must be configured for the service to perform acceptably.
    # See https://github.com/dremio/dremio-cloud-tools/blob/master/charts/dremio_v2/docs/Values-Reference.md#distributed-storage-values
    # Configure this section as appropriate for your environment. The configuration below
    # assumes the service is being connected to Amazon S3 or an equivalent, like MinIO.
    # Note: this only partially configures distributed storage. See the rest of the configuration in
    # systemlink-values.yaml under dataframeservice.sldremio.distStorage.
    distStorage:
      aws: # <ATTENTION> - change if not using Amazon S3 or an equivalent
        credentials:
          accessKey: *minioUser # <ATTENTION> - change if not using MinIO
          secret: *minioPassword # <ATTENTION> - change if not using MinIO

## Secret configuration for file uploads.
##
fileingestion:
  secrets:
    ## Cryptographic key used for AES-256 encryption of data at restI. Use a 32-byte cryptographically random value which is base64 encoded.
    ##
    encryptionKey: ""  # <ATTENTION>
    ## Access key information for S3/MinIO access.
    ## If using MinIO, use the user and password from the MinIO configuration above here. Otherwise, S3 credentials will need to be provided.
    ##
    s3:
      ## Access key ID for the S3 instance. Override if not using MinIO.
      ##
      accessKeyId: *minioUser
      ## Access key for the S3 instance. Override if not using MinIO.
      ##
      accessKey: *minioPassword
      ## Default region for the S3 instance. Override if not using MinIO.
      ##
      defaultRegion: "us-east-1"
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: ""  # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # <ATTENTION>

## Secret configuration for Jupyter notebook execution.
##
nbexecservice:
  secrets:
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: "" # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: "" # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to mongodb documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: "" # <ATTENTION>

## Secret configuration for notifications
##
notification:
  secrets:
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: "" # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: "" # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to mongodb documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: "" # <ATTENTION>

## Secret configuration for emails
##
smtp:
  secrets:
    smtpServer:
      ## Optional - Credentials used to access the SMTP server
      ##
      username: "" # <ATTENTION>
      password: "" # <ATTENTION>

## Secret configuration for the systems event manager.
##
sysmgmtevent:
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: ""  # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # <ATTENTION>

## Secret configuration for systems management.
##
systems:
  secrets:
    ## Cryptographic key to be used for AES-128 encryption of data. This key should have a length of 32 bytes.
    ##
    encryptionKey: ""  # <ATTENTION>
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: ""  # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # <ATTENTION>

## Secret configuration for test result storage.
##
testmonitorservice:
  secrets:
    ## Database configuration secrets. Only set one of connectionString or connectionPassword depending on whether
    ## the database is external or managed by this chart.
    ##
    database:
      ## Connection string for an existing PostgresSQL database.
      ## NOTE: Ignored unless `database.connectionString.secretName` parameter is set.
      ##
      connectionString: ""  # <ATTENTION>
      ## Password to use for a PostgresSQL database created by this chart.
      ## NOTE: Ignored if `database.secretName` parameter is set.
      ##
      connectionPassword: ""  # <ATTENTION>

## Secret configuration for user data
##
userdata:
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: ""  # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # <ATTENTION>

## Secret configuration for document hosting
##
webappservices:
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: ""  # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # <ATTENTION>
    ## Cryptographic key used for AEAD encryption of continuation tokens. Use a 32-byte cryptographically random value which is base64 encoded.
    ##
    continuationTokenEncryptionKey: ""  # <ATTENTION>

## Secret configuration for routine management
##
routineservice:
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: ""  # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # <ATTENTION>

## Secret configuration for time-based routine triggering
##
routinescheduletrigger:
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: ""  # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # <ATTENTION>

## Secret configuration for licensing
##
license:
  ## This array will contain a quoted activation ID for a SystemLink Enterprise license.
  ## Your activation ID will be emailed to the address you specify when you purchase your license.
  ##
  activationIds: [] # <ATTENTION>
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # <ATTENTION>
      ## Limited user password to allow the service to access the database. This password cannot contain commas or any character that must be escaped in a URL.
      ##
      servicePassword: ""  # <ATTENTION>
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # <ATTENTION>
